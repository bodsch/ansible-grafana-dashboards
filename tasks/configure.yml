---

- name: "check if there are any dashboards in {{ grafana_dashboards_dir }}"
  delegate_to: localhost
  become: false
  find:
    paths: "{{ grafana_dashboards_dir }}"
    patterns: "*.json"
    file_type: file
    recurse: true
  run_once: true
  register: found_dashboards

- block:
    # reduce the found dashboards to the subdirectories and remove the basepath
    #
    - name: reduce the found dashboards to the subdirectories and remove the basepath
      set_fact:
        _sub_directories: "{{ _sub_directories | default([]) + [ item.path | dirname | regex_replace( grafana_dashboards_dir + '/','' ) ] }}"
      # no_log: true
      diff: false
      with_items:
        - "{{ found_dashboards.files | flatten( levels=1 ) }}"
      loop_control:
        label: "{{ item.path }}"

    - name: register unique subdirectories
      set_fact:
        sub_directories: "{{ sub_directories | default([]) + [ item ] }}"
      with_items:
        - "{{ _sub_directories | list | unique }}"

    # - debug:
    #     var: "{{ item }}"
    #   when: item is defined
    #   loop:
    #     - sub_directories

    - name: copy local dashboards to our remote system
      copy:
        src: "{{ grafana_dashboards_dir }}/{{ item }}"
        dest: "{{ grafana_data_dir }}/dashboards/"
        owner: grafana
        group: grafana
        mode: 0640
      loop:
        "{{ sub_directories }}"
      notify:
        - provisioned dashboards changed

    # - name: synchronize dashboards on remote system {{ grafana_data_dir }}/dashboards/
    #   synchronize:
    #     src: "/tmp/grafana-dashboards"
    #     dest: "{{ grafana_data_dir }}/dashboards/"
    #     recursive: true
    #     archive: false
    #     delete: true
    #     owner: false
    #     group: false
    #     checksum: true
    #     rsync_path: su -c rsync
    #     rsync_opts:
    #       - "--exclude=.git"
    #       - --verbose
    #   delegate_to: "{{ inventory_hostname }}"
    #   notify: "provisioned dashboards changed"

    - name: create / update dashboards file (provisioning)
      become: true
      copy:
        dest: "/etc/grafana/provisioning/dashboards/{{ item }}.yml"
        content: |
          apiVersion: 1
          providers:
            - name: '{{ item }}'
              orgId: 1
              folder: '{{ item }}'
              type: file
              options:
                path: "{{ grafana_data_dir }}/dashboards/{{ item }}"
        backup: false
        owner: root
        group: grafana
        mode: 0640
      loop:
        "{{ sub_directories }}"
      notify:
        - restart grafana

    - name: fix permissions for dashboard directory  # noqa 301
      command: "{{ item }}"
      args:
        warn: false
      with_items:
        - chown -R grafana:grafana {{ grafana_data_dir }}/dashboards
        - find {{ grafana_data_dir }}/dashboards -maxdepth 5 -type d ! -perm 0750 -exec chmod 0750 {} \;
        - find {{ grafana_data_dir }}/dashboards -maxdepth 5 -type f ! -perm 0640 -exec chmod 0640 {} \;

  when: found_dashboards | length != 0

...
